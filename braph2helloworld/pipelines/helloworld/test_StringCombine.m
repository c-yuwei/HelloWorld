%TEST_STRINGCOMBINE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	sc = StringCombine();
	 
	% get('ELCLASS')
	if isa(StringCombine, 'ConcreteElement')
		assert(strcmp(StringCombine().get('ELCLASS'), 'StringCombine'), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine().get(''ELCLASS'') should return ''StringCombine''.')
	end
	 
	% getBuild()
	assert(StringCombine.getBuild() == 1 && StringCombine.getBuild() > 0, ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.getBuild() should return the StringCombine build number.')
	assert(sc.getBuild() == 1 && sc.getBuild() > 0 , ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'sc.getBuild() should return the StringCombine build number.')
	assert(Element.getBuild(sc) == 1 && Element.getBuild(sc) > 0, ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(sc) should return the StringCombine build number.')
	assert(Element.getBuild('StringCombine') == 1 && Element.getBuild('StringCombine') > 0, ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''StringCombine'') should return the StringCombine build number.')
	 
	% getClass()
	assert(strcmp(StringCombine.getClass(), 'StringCombine'), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.getClass() should return ''StringCombine''.')
	assert(strcmp(sc.getClass(), 'StringCombine'), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'sc.getClass() should return ''StringCombine''.')
	assert(strcmp(Element.getClass(sc), 'StringCombine'), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(sc) should return ''StringCombine''.')
	assert(strcmp(Element.getClass('StringCombine'), 'StringCombine'), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''StringCombine'') should return ''StringCombine''.')
	 
	% getSubclasses()
	assert(isequal(StringCombine.getSubclasses(), subclasses('StringCombine', [], [], true)), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.getSubclasses() should return the same result as subclasses(''StringCombine'', [], [], true).')
	assert(isequal(sc.getSubclasses(), subclasses('StringCombine', [], [], true)), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''StringCombine'', [], [], true).')
	assert(isequal(Element.getSubclasses(sc), subclasses('StringCombine', [], [], true)), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(sc) should return the same result as subclasses(''StringCombine'', [], [], true).')
	assert(isequal(Element.getSubclasses('StringCombine'), subclasses('StringCombine', [], [], true)), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''StringCombine'') should return the same result as subclasses(''StringCombine'', [], [], true).')
	 
	% getProps()
	assert(isempty(StringCombine.getProps()) || isequal(StringCombine.getProps(), 1:1:length(StringCombine.getProps())), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.getProps() should return a row vector [1:1:N].')
	assert(isempty(StringCombine.getProps()) || isequal(sc.getProps(), 1:1:length(StringCombine.getProps())), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'sc.getProps() should return a row vector [1:1:N].')
	assert(isempty(StringCombine.getProps()) || isequal(Element.getProps(sc), 1:1:length(StringCombine.getProps())), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(sc) should return a row vector [1:1:N].')
	assert(isempty(StringCombine.getProps()) || isequal(Element.getProps('StringCombine'), 1:1:length(StringCombine.getProps())), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''StringCombine'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) StringCombine.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(StringCombine.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(StringCombine.getProps())), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.getProps(category) does not work.')
	tmp = cellfun(@(category) sc.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(StringCombine.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(StringCombine.getProps())), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'sc.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(sc, category), categories, 'UniformOutput', false);
	assert(isempty(StringCombine.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(StringCombine.getProps())), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(sc, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('StringCombine', category), categories, 'UniformOutput', false);
	assert(isempty(StringCombine.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(StringCombine.getProps())), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''StringCombine'', category) does not work.')
	 
	% getPropNumber()
	assert(StringCombine.getPropNumber() == length(StringCombine.getProps()), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.getPropNumber() should return the number of properties.')
	assert(sc.getPropNumber() == length(StringCombine.getProps()), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'sc.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(sc) == length(StringCombine.getProps()), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(sc) should return the number of properties.')
	assert(Element.getPropNumber('StringCombine') == length(StringCombine.getProps()), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''StringCombine'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) StringCombine.getPropNumber(category), categories)) == StringCombine.getPropNumber(), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) sc.getPropNumber(category), categories)) == StringCombine.getPropNumber(), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'sc.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(sc, category), categories)) == StringCombine.getPropNumber(), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(sc, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('StringCombine', category), categories)) == StringCombine.getPropNumber(), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''StringCombine'', category) does not work.')
	 
	% existsProp(prop)
	assert(~StringCombine.existsProp(NaN), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.existsProp(prop) does not work.')
	assert(~sc.existsProp(NaN), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'sc.existsProp(prop) does not work.')
	assert(~Element.existsProp(sc, NaN), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(sc, prop) does not work.')
	assert(~Element.existsProp('StringCombine', NaN), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''StringCombine'', prop) does not work.')
	 
	assert_with_error('StringCombine.existsProp(NaN)', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT], sc)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT], sc)
	assert_with_error('Element.existsProp(''StringCombine'', NaN)', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:StringCombine.getPropNumber()
		assert(StringCombine.existsProp(prop), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.existsProp(prop) does not work.')
		assert(sc.existsProp(prop), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.existsProp(prop) does not work.')
		assert(Element.existsProp(sc, prop), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(sc, prop) does not work.')
		assert(Element.existsProp('StringCombine', prop), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''StringCombine'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~StringCombine.existsTag(''), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.existsTag(tag) does not work.')
	assert(~sc.existsTag(''), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'sc.existsTag(tag) does not work.')
	assert(~Element.existsTag(sc, ''), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(sc, tag) does not work.')
	assert(~Element.existsTag('StringCombine', ''), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''StringCombine'', tag) does not work.')
	 
	assert_with_error('StringCombine.existsTag('''')', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT], sc)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT], sc)
	assert_with_error('Element.existsTag(''StringCombine'', '''')', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:StringCombine.getPropNumber()
		tag = sc.getPropTag(prop);
		assert(StringCombine.existsTag(tag), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.existsTag(tag) does not work.')
		assert(sc.existsTag(tag), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.existsTag(tag) does not work.')
		assert(Element.existsTag(sc, tag), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(sc, tga) does not work.')
		assert(Element.existsTag('StringCombine', tag), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''StringCombine'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:StringCombine.getPropNumber()
		assert(StringCombine.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.getPropProp(prop) does not work.')
		assert(sc.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.getPropProp(prop) does not work.')
		assert(Element.getPropProp(sc, prop) == prop, ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(sc, prop) does not work.')
		assert(Element.getPropProp('StringCombine', prop) == prop, ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''StringCombine'', prop) does not work.')
	 
		tag = sc.getPropTag(prop);
		assert(StringCombine.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.getPropProp(tag) does not work.')
		assert(sc.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.getPropProp(tag) does not work.')
		assert(Element.getPropProp(sc, tag) == prop, ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(sc, tag) does not work.')
		assert(Element.getPropProp('StringCombine', prop) == prop, ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''StringCombine'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:StringCombine.getPropNumber()
		tag = sc.getPropTag(prop);
	 
		assert(strcmp(StringCombine.getPropTag(prop), tag), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.getPropTag(prop) does not work.')
		assert(strcmp(sc.getPropTag(prop), tag), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(sc, prop), tag), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(sc, prop) does not work.')
		assert(strcmp(Element.getPropTag('StringCombine', prop), tag), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''StringCombine'', prop) does not work.')
	 
		assert(strcmp(StringCombine.getPropTag(tag), tag), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.getPropTag(tag) does not work.')
		assert(strcmp(sc.getPropTag(tag), tag), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(sc, tag), tag), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(sc, tag) does not work.')
		assert(strcmp(Element.getPropTag('StringCombine', prop), tag), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''StringCombine'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:StringCombine.getPropNumber()
		tag = sc.getPropTag(prop);
	 
		assert(Category.existsCategory(StringCombine.getPropCategory(prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(sc.getPropCategory(prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sc, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(sc, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sc, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''StringCombine'', prop) does not work.')
	 
		assert(Category.existsCategory(StringCombine.getPropCategory(tag)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(sc.getPropCategory(tag)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sc, tag)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(sc, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(sc, tag)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''StringCombine'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:StringCombine.getPropNumber()
		tag = sc.getPropTag(prop);
	 
		assert(Format.existsFormat(StringCombine.getPropFormat(prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(sc.getPropFormat(prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sc, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(sc, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sc, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''StringCombine'', prop) does not work.')
	 
		assert(Format.existsFormat(StringCombine.getPropFormat(tag)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(sc.getPropFormat(tag)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sc, tag)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(sc, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(sc, tag)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''StringCombine'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:StringCombine.getPropNumber()
		tag = sc.getPropTag(prop);
	 
		assert(ischar(StringCombine.getPropDescription(prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.getPropDescription(prop) does not work.')
		assert(ischar(sc.getPropDescription(prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(sc, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(sc, prop) does not work.')
		assert(ischar(Element.getPropDescription(sc, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''StringCombine'', prop) does not work.')
	 
		assert(ischar(StringCombine.getPropDescription(tag)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.getPropDescription(tag) does not work.')
		assert(ischar(sc.getPropDescription(tag)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(sc, tag)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(sc, tag) does not work.')
		assert(ischar(Element.getPropDescription(sc, tag)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''StringCombine'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:StringCombine.getPropNumber()
		tag = sc.getPropTag(prop);
	 
		settings = StringCombine.getPropSettings(prop);
		settings = sc.getPropSettings(prop);
		settings = Element.getPropSettings(sc, prop);
		settings = Element.getPropSettings('StringCombine', prop);
	 
		settings = StringCombine.getPropSettings(tag);
		settings = sc.getPropSettings(tag);
		settings = Element.getPropSettings(sc, tag);
		settings = Element.getPropSettings('StringCombine', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:StringCombine.getPropNumber()
		tag = sc.getPropTag(prop);
	 
		default = StringCombine.getPropDefault(prop);
		default = sc.getPropDefault(prop);
		default = Element.getPropDefault(sc, prop);
		default = Element.getPropDefault('StringCombine', prop);
	 
		default = StringCombine.getPropDefault(tag);
		default = sc.getPropDefault(tag);
		default = Element.getPropDefault(sc, tag);
		default = Element.getPropDefault('StringCombine', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:StringCombine.getPropNumber()
		tag = sc.getPropTag(prop);
	 
		conditioned_default = StringCombine.getPropDefaultConditioned(prop);
		conditioned_default = sc.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(sc, prop);
		conditioned_default = Element.getPropDefaultConditioned('StringCombine', prop);
	 
		conditioned_default = StringCombine.getPropDefaultConditioned(tag);
		conditioned_default = sc.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(sc, tag);
		conditioned_default = Element.getPropDefaultConditioned('StringCombine', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:StringCombine.getPropNumber()
		tag = sc.getPropTag(prop);
	 
		assert(~StringCombine.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.checkProp(prop, value) does not work.')
		assert(~sc.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(sc, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sc, prop, value) does not work.')
		assert(~Element.checkProp('StringCombine', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''StringCombine'', prop, value) does not work.')
	 
		assert_with_error('StringCombine.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT], prop, sc)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT], prop, sc)
		assert_with_error('Element.checkProp(''StringCombine'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~StringCombine.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.checkProp(tag, value) does not work.')
		assert(~sc.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(sc, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sc, tag, value) does not work.')
		assert(~Element.checkProp('StringCombine', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''StringCombine'', tag, value) does not work.')
	 
		assert_with_error('StringCombine.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT], tag, sc)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT], tag, sc)
		assert_with_error('Element.checkProp(''StringCombine'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringCombine:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(StringCombine.checkProp(prop, Element.getPropDefaultConditioned(StringCombine, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.checkProp(prop, <conditioned default value>) does not work.')
		assert(sc.checkProp(prop, Element.getPropDefaultConditioned(StringCombine, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(sc, prop, Element.getPropDefaultConditioned(StringCombine, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sc, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('StringCombine', prop, Element.getPropDefaultConditioned(StringCombine, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''StringCombine'', prop, <conditioned default value>) does not work.')
	 
		assert(StringCombine.checkProp(tag, Element.getPropDefaultConditioned(StringCombine, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.checkProp(tag, <conditioned default value>) does not work.')
		assert(sc.checkProp(tag, Element.getPropDefaultConditioned(StringCombine, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'sc.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(sc, tag, Element.getPropDefaultConditioned(StringCombine, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(sc, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('StringCombine', tag, Element.getPropDefaultConditioned(StringCombine, prop)), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''StringCombine'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sc = StringCombine( ...
		StringCombine.ELCLASS, StringCombine.getNoValue(), ...
		StringCombine.NAME, StringCombine.getNoValue(), ...
		StringCombine.DESCRIPTION, StringCombine.getNoValue(), ...
		StringCombine.TEMPLATE, StringCombine.getPropDefault(StringCombine.TEMPLATE), ...
		StringCombine.ID, StringCombine.getPropDefault(StringCombine.ID), ...
		StringCombine.LABEL, StringCombine.getPropDefault(StringCombine.LABEL), ...
		StringCombine.NOTES, StringCombine.getPropDefault(StringCombine.NOTES), ...
		StringCombine.TOSTRING, StringCombine.getNoValue(), ...
		StringCombine.SU1, StringCombine.getPropDefault(StringCombine.SU1), ...
		StringCombine.SU2, StringCombine.getPropDefault(StringCombine.SU2), ...
		StringCombine.S_COMBINED, StringCombine.getNoValue() ...
		);
	 
	for prop = 1:1:StringCombine.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(StringCombine.getPropTag(prop));
		switch StringCombine.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					sc.getr(prop) == StringCombine.getNoValue(), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['Being a ' StringCombine.getCategoryName(StringCombine.getPropCategory(prop)) ', StringCombine.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in StringCombine.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					sc.getr(TAG) == StringCombine.getNoValue(), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['Being a ' StringCombine.getCategoryName(StringCombine.getPropCategory(prop)) ', StringCombine.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in StringCombine.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(sc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(sc.getPropSettings(prop))
					assert( ...
						sc.checkFormat(sc.getPropFormat(prop), sc.get(prop)), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						['StringCombine.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						sc.checkFormat(sc.getPropFormat(prop), sc.get(prop), sc.getPropSettings(prop)), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						['StringCombine.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					sc.getr(prop) == StringCombine.getNoValue(), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['Being a ' StringCombine.getCategoryName(StringCombine.getPropCategory(prop)) ', StringCombine.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in StringCombine.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					sc.getr(TAG) == StringCombine.getNoValue(), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['Being a ' StringCombine.getCategoryName(StringCombine.getPropCategory(prop)) ', StringCombine.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in StringCombine.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':StringCombine']);
				assert( ...
					~isa(sc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(sc.getPropSettings(prop))
					assert( ...
						sc.checkFormat(sc.getPropFormat(prop), sc.get(prop)), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						['StringCombine.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						sc.checkFormat(sc.getPropFormat(prop), sc.get(prop), sc.getPropSettings(prop)), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						['StringCombine.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(sc.getr(prop), StringCombine.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by StringCombine.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in StringCombine.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(sc.getr(TAG), StringCombine.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' TAG ') must be inizialized to its default value ' ...
					'given by StringCombine.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in StringCombine.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sc = StringCombine( ...
		StringCombine.ELCLASS, StringCombine.getNoValue(), ...
		StringCombine.NAME, StringCombine.getNoValue(), ...
		StringCombine.DESCRIPTION, StringCombine.getNoValue(), ...
		StringCombine.TEMPLATE, StringCombine.getPropDefault(StringCombine.TEMPLATE), ...
		StringCombine.ID, StringCombine.getPropDefault(StringCombine.ID), ...
		StringCombine.LABEL, StringCombine.getPropDefault(StringCombine.LABEL), ...
		StringCombine.NOTES, StringCombine.getPropDefault(StringCombine.NOTES), ...
		StringCombine.TOSTRING, StringCombine.getNoValue(), ...
		StringCombine.SU1, StringCombine.getPropDefault(StringCombine.SU1), ...
		StringCombine.SU2, StringCombine.getPropDefault(StringCombine.SU2), ...
		StringCombine.S_COMBINED, StringCombine.getNoValue() ...
		);
	 
	for prop = 1:1:StringCombine.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(StringCombine.getPropTag(prop));
		switch StringCombine.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(sc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(sc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(sc.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(sc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					sc.checkFormat(sc.getPropFormat(prop), sc.getr(prop),sc.getPropSettings(prop)), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':StringCombine']);
				assert( ...
					~isa(sc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(sc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':StringCombine']);
	% 			assert( ...
	% 				~isa(sc.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
	% 				['StringCombine.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(sc.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
	% 				['StringCombine.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				sc.checkFormat(sc.getPropFormat(prop), sc.getr(prop),sc.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
	% 				['StringCombine.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':StringCombine']);
				assert( ...
					~isa(sc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(sc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(sc.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(sc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					sc.checkFormat(sc.getPropFormat(prop), sc.getr(prop),sc.getPropSettings(prop)), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if sc.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:StringCombine');
					delete(ancestor(sc.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(StringCombine.getProps(Category.RESULT))
		for prop = 1:1:StringCombine.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch StringCombine.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						sc.isLocked(prop), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						['StringCombine.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~sc.isLocked(prop), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						['StringCombine.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sc = StringCombine();
	 
	for prop = 1:1:StringCombine.getPropNumber()
		TAG = upper(StringCombine.getPropTag(prop));
		assert( ...
			~sc.isLocked(prop), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			['StringCombine.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~sc.isLocked(TAG), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			['StringCombine.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	sc.lock()
	 
	for prop = 1:1:StringCombine.getPropNumber()
		switch StringCombine.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					sc.isLocked(prop), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~sc.isLocked(prop), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sc = StringCombine();
	 
	warning_backup = warning('off', 'BRAPH2:StringCombine');
	for prop = 1:1:StringCombine.getPropNumber()
		sc.lock(prop)
		switch StringCombine.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					sc.isLocked(prop), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~sc.isLocked(prop), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sc = StringCombine();
	 
	for prop = 1:1:StringCombine.getPropNumber()
		TAG = upper(StringCombine.getPropTag(prop));
		assert( ...
			sc.isChecked(prop), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			['StringCombine.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			sc.isChecked(TAG), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			['StringCombine.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	sc.unchecked()
	 
	for prop = 1:1:StringCombine.getPropNumber()
		assert( ...
			~sc.isChecked(prop), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			['StringCombine.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	sc.checked()
	 
	for prop = 1:1:StringCombine.getPropNumber()
		assert( ...
			sc.isChecked(prop), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			['StringCombine.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic StringCombine
	sc_0 = StringCombine( ...
		StringCombine.ELCLASS, StringCombine.getNoValue(), ...
		StringCombine.NAME, StringCombine.getNoValue(), ...
		StringCombine.DESCRIPTION, StringCombine.getNoValue(), ...
		StringCombine.TEMPLATE, StringCombine.getPropDefault(StringCombine.TEMPLATE), ...
		StringCombine.ID, StringCombine.getPropDefault(StringCombine.ID), ...
		StringCombine.LABEL, StringCombine.getPropDefault(StringCombine.LABEL), ...
		StringCombine.NOTES, StringCombine.getPropDefault(StringCombine.NOTES), ...
		StringCombine.TOSTRING, StringCombine.getNoValue(), ...
		StringCombine.SU1, StringCombine.getPropDefault(StringCombine.SU1), ...
		StringCombine.SU2, StringCombine.getPropDefault(StringCombine.SU2), ...
		StringCombine.S_COMBINED, StringCombine.getNoValue() ...
		);
	 
	% StringCombine with 1st callbacks
	sc_1 = StringCombine( ...
		StringCombine.ELCLASS, StringCombine.getNoValue(), ...
		StringCombine.NAME, StringCombine.getNoValue(), ...
		StringCombine.DESCRIPTION, StringCombine.getNoValue(), ...
		StringCombine.TEMPLATE, sc_0.getCallback(4), ..., ...
		StringCombine.ID, sc_0.getCallback(5), ..., ...
		StringCombine.LABEL, StringCombine.getPropDefault(StringCombine.LABEL), ...
		StringCombine.NOTES, StringCombine.getPropDefault(StringCombine.NOTES), ...
		StringCombine.TOSTRING, StringCombine.getNoValue(), ...
		StringCombine.SU1, sc_0.getCallback(9), ..., ...
		StringCombine.SU2, sc_0.getCallback(10), ..., ...
		StringCombine.S_COMBINED, StringCombine.getNoValue() ...
		);
	 
	prop_number = StringCombine.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(StringCombine.getPropTag(prop));
		switch StringCombine.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sc_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sc_1.get(prop), sc_0.get(prop)) && ~isa(sc_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sc_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% StringCombine with 2nd callbacks
	sc_2 = StringCombine( ...
		StringCombine.ELCLASS, StringCombine.getNoValue(), ...
		StringCombine.NAME, StringCombine.getNoValue(), ...
		StringCombine.DESCRIPTION, StringCombine.getNoValue(), ...
		StringCombine.TEMPLATE, sc_1.getCallback(4), ..., ...
		StringCombine.ID, sc_1.getCallback(5), ..., ...
		StringCombine.LABEL, StringCombine.getPropDefault(StringCombine.LABEL), ...
		StringCombine.NOTES, StringCombine.getPropDefault(StringCombine.NOTES), ...
		StringCombine.TOSTRING, StringCombine.getNoValue(), ...
		StringCombine.SU1, sc_1.getCallback(9), ..., ...
		StringCombine.SU2, sc_1.getCallback(10), ..., ...
		StringCombine.S_COMBINED, StringCombine.getNoValue() ...
		);
	 
	prop_number = StringCombine.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(StringCombine.getPropTag(prop));
		switch StringCombine.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sc_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sc_2.get(prop), sc_0.get(prop)) && ~isa(sc_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sc_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% StringCombine with 3rd callbacks
	sc_3 = StringCombine( ...
		StringCombine.ELCLASS, StringCombine.getNoValue(), ...
		StringCombine.NAME, StringCombine.getNoValue(), ...
		StringCombine.DESCRIPTION, StringCombine.getNoValue(), ...
		StringCombine.TEMPLATE, sc_2.getCallback(4), ..., ...
		StringCombine.ID, sc_2.getCallback(5), ..., ...
		StringCombine.LABEL, StringCombine.getPropDefault(StringCombine.LABEL), ...
		StringCombine.NOTES, StringCombine.getPropDefault(StringCombine.NOTES), ...
		StringCombine.TOSTRING, StringCombine.getNoValue(), ...
		StringCombine.SU1, sc_2.getCallback(9), ..., ...
		StringCombine.SU2, sc_2.getCallback(10), ..., ...
		StringCombine.S_COMBINED, StringCombine.getNoValue() ...
		);
	 
	prop_number = StringCombine.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(StringCombine.getPropTag(prop));
		switch StringCombine.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(sc_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(sc_3.get(prop), sc_0.get(prop)) && ~isa(sc_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(sc_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	sc = StringCombine();
	 
	sc_copy = sc.copy();
	 
	assert(sc_copy ~= sc, ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(sc_copy, sc), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:StringCombine.getPropNumber()
		value = sc.getr(prop);
		value_copy = sc_copy.getr(prop);
		switch StringCombine.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					'StringCombine.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
							'StringCombine.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
							'StringCombine.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					sc_copy.isLocked(prop) == sc.isLocked(prop), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					'StringCombine.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					sc_copy.isChecked(prop) == sc.isChecked(prop), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					'StringCombine.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					sc_copy.getPropSeed(prop) == sc.getPropSeed(prop), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					'StringCombine.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	sc = StringCombine( ...
		StringCombine.ELCLASS, StringCombine.getNoValue(), ...
		StringCombine.NAME, StringCombine.getNoValue(), ...
		StringCombine.DESCRIPTION, StringCombine.getNoValue(), ...
		StringCombine.TEMPLATE, StringCombine.getPropDefault(StringCombine.TEMPLATE), ...
		StringCombine.ID, StringCombine.getPropDefault(StringCombine.ID), ...
		StringCombine.LABEL, StringCombine.getPropDefault(StringCombine.LABEL), ...
		StringCombine.NOTES, StringCombine.getPropDefault(StringCombine.NOTES), ...
		StringCombine.TOSTRING, StringCombine.getNoValue(), ...
		StringCombine.SU1, StringCombine.getPropDefault(StringCombine.SU1), ...
		StringCombine.SU2, StringCombine.getPropDefault(StringCombine.SU2), ...
		StringCombine.S_COMBINED, StringCombine.getNoValue() ...
		);
	 
	for prop = 1:1:StringCombine.getPropNumber()
		if StringCombine.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':StringCombine']);
			% sc.memorize(prop);
			% warning(warning_backup)
		elseif StringCombine.getPropCategory(prop) == Category.EVANESCENT && sc.getPropFormat(prop) == Format.HANDLE
			sc.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:StringCombine');
			delete(ancestor(sc.get(prop), 'figure'))
			warning(warning_backup)
		else
			sc.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	sc_copy = sc.copy();
	 
	for prop = 1:1:StringCombine.getPropNumber()
		value = sc.getr(prop);
		value_copy = sc_copy.getr(prop);
		switch StringCombine.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					'StringCombine.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
							'StringCombine.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
							'StringCombine.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						sc_copy.isLocked(prop) == sc.isLocked(prop), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sc_copy.isChecked(prop) == sc.isChecked(prop), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sc_copy.getPropSeed(prop) == sc.getPropSeed(prop), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	sc_0 = StringCombine( ...
		StringCombine.ELCLASS, StringCombine.getNoValue(), ...
		StringCombine.NAME, StringCombine.getNoValue(), ...
		StringCombine.DESCRIPTION, StringCombine.getNoValue(), ...
		StringCombine.TEMPLATE, StringCombine.getPropDefault(StringCombine.TEMPLATE), ...
		StringCombine.ID, StringCombine.getPropDefault(StringCombine.ID), ...
		StringCombine.LABEL, StringCombine.getPropDefault(StringCombine.LABEL), ...
		StringCombine.NOTES, StringCombine.getPropDefault(StringCombine.NOTES), ...
		StringCombine.TOSTRING, StringCombine.getNoValue(), ...
		StringCombine.SU1, StringCombine.getPropDefault(StringCombine.SU1), ...
		StringCombine.SU2, StringCombine.getPropDefault(StringCombine.SU2), ...
		StringCombine.S_COMBINED, StringCombine.getNoValue() ...
		);
	 
	sc = StringCombine( ...
		StringCombine.ELCLASS, StringCombine.getNoValue(), ...
		StringCombine.NAME, StringCombine.getNoValue(), ...
		StringCombine.DESCRIPTION, StringCombine.getNoValue(), ...
		StringCombine.TEMPLATE, sc_0.getCallback(4), ..., ...
		StringCombine.ID, sc_0.getCallback(5), ..., ...
		StringCombine.LABEL, StringCombine.getPropDefault(StringCombine.LABEL), ...
		StringCombine.NOTES, StringCombine.getPropDefault(StringCombine.NOTES), ...
		StringCombine.TOSTRING, StringCombine.getNoValue(), ...
		StringCombine.SU1, sc_0.getCallback(9), ..., ...
		StringCombine.SU2, sc_0.getCallback(10), ..., ...
		StringCombine.S_COMBINED, StringCombine.getNoValue() ...
		);
	 
	sc_copy = sc.copy();
	sc_0_copy = sc_copy.getr('ID').get('EL');
	 
	for prop = 1:1:StringCombine.getPropNumber()
		value = sc.getr(prop);
		value_copy = sc_copy.getr(prop);
		switch StringCombine.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					'StringCombine.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
							'StringCombine.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
							'StringCombine.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == sc_0.getCallback(prop), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The callback should be obtained from StringCombine.getCallback().' ...
						)
					assert( ...
						value_copy == sc_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The callback should be obtained from StringCombine.getCallback().' ...
						)
				end
	 
					assert( ...
						sc_copy.isLocked(prop) == sc.isLocked(prop), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sc_copy.isChecked(prop) == sc.isChecked(prop), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						sc_copy.getPropSeed(prop) == sc.getPropSeed(prop), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sc_template = StringCombine();
	sc = StringCombine('TEMPLATE', sc_template);
	 
	for prop = 1:1:StringCombine.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(StringCombine.getPropTag(prop));
		switch StringCombine.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == StringCombine.TEMPLATE
					assert( ...
						isa(sc.getr(prop), 'StringCombine'), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine TEMPLATE does not work. StringCombine.getr(''TEMPLATE'') should be a StringCombine element.' ...
						)
					assert( ...
						isa(sc_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						'StringCombine TEMPLATE does not work. StringCombine_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(sc.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						['StringCombine TEMPLATE does not work. StringCombine.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						sc.getr(prop).get('EL') == sc_template && sc.getr(prop).get('PROP') == prop && strcmp(sc.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						['StringCombine TEMPLATE does not work. StringCombine.getr(' TAG ') should be a Callback to sc_template.' TAG '.'] ...
						)
					assert( ...
						isa(sc_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
						['StringCombine TEMPLATE does not work. StringCombine_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(sc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine TEMPLATE does not work. StringCombine.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(sc_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
					['StringCombine TEMPLATE does not work. StringCombine_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sc = StringCombine( ...
		StringCombine.ELCLASS, StringCombine.getNoValue(), ...
		StringCombine.NAME, StringCombine.getNoValue(), ...
		StringCombine.DESCRIPTION, StringCombine.getNoValue(), ...
		StringCombine.TEMPLATE, StringCombine.getPropDefault(StringCombine.TEMPLATE), ...
		StringCombine.ID, StringCombine.getPropDefault(StringCombine.ID), ...
		StringCombine.LABEL, StringCombine.getPropDefault(StringCombine.LABEL), ...
		StringCombine.NOTES, StringCombine.getPropDefault(StringCombine.NOTES), ...
		StringCombine.TOSTRING, StringCombine.getNoValue(), ...
		StringCombine.SU1, StringCombine.getPropDefault(StringCombine.SU1), ...
		StringCombine.SU2, StringCombine.getPropDefault(StringCombine.SU2), ...
		StringCombine.S_COMBINED, StringCombine.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'stringcombine_to_be_erased.b2'];
	 
	Element.save(sc, filename)
	 
	sc_loaded = Element.load(filename);
	 
	assert( ...
		isequal(sc.copy(), sc_loaded), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.save(sc) and/or StringCombine.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	sc = StringCombine( ...
		StringCombine.ELCLASS, StringCombine.getNoValue(), ...
		StringCombine.NAME, StringCombine.getNoValue(), ...
		StringCombine.DESCRIPTION, StringCombine.getNoValue(), ...
		StringCombine.TEMPLATE, StringCombine.getPropDefault(StringCombine.TEMPLATE), ...
		StringCombine.ID, StringCombine.getPropDefault(StringCombine.ID), ...
		StringCombine.LABEL, StringCombine.getPropDefault(StringCombine.LABEL), ...
		StringCombine.NOTES, StringCombine.getPropDefault(StringCombine.NOTES), ...
		StringCombine.TOSTRING, StringCombine.getNoValue(), ...
		StringCombine.SU1, StringCombine.getPropDefault(StringCombine.SU1), ...
		StringCombine.SU2, StringCombine.getPropDefault(StringCombine.SU2), ...
		StringCombine.S_COMBINED, StringCombine.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(sc);
	[sc_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(sc_dec ~= sc, ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		'StringCombine.encodeJSON() or StringCombine.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) StringCombine.getPropFormat(prop), num2cell(StringCombine.getProps())) == Format.HANDLE) && all(cellfun(@(prop) StringCombine.getPropFormat(prop), num2cell(StringCombine.getProps())) == Format.NET)
		assert(isequal(sc_dec, sc), ...
			[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
			'StringCombine.encodeJSON() or StringCombine.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: test
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	defined_string1 = 'test1';
	su1 = StringUnit('S', defined_string1);
	
	defined_string2 = 'test2';
	su2 = StringUnit('S', defined_string2);
	
	sc = StringCombine('SU1', su1, 'SU2', su2);
	
	assert(isequal(sc.get('S_COMBINED'), [defined_string1 ' ' defined_string2]), ...
	    [BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
	    'StringCombine does not combine the defined strings properly.' ...
	    )
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':StringCombine:' BRAPH2.FAIL_TEST], ...
		[' When testing StringCombine no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end


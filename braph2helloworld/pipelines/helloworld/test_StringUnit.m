%TEST_STRINGUNIT

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	s = StringUnit();
	 
	% get('ELCLASS')
	if isa(StringUnit, 'ConcreteElement')
		assert(strcmp(StringUnit().get('ELCLASS'), 'StringUnit'), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit().get(''ELCLASS'') should return ''StringUnit''.')
	end
	 
	% getBuild()
	assert(StringUnit.getBuild() == 1 && StringUnit.getBuild() > 0, ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.getBuild() should return the StringUnit build number.')
	assert(s.getBuild() == 1 && s.getBuild() > 0 , ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		's.getBuild() should return the StringUnit build number.')
	assert(Element.getBuild(s) == 1 && Element.getBuild(s) > 0, ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(s) should return the StringUnit build number.')
	assert(Element.getBuild('StringUnit') == 1 && Element.getBuild('StringUnit') > 0, ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''StringUnit'') should return the StringUnit build number.')
	 
	% getClass()
	assert(strcmp(StringUnit.getClass(), 'StringUnit'), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.getClass() should return ''StringUnit''.')
	assert(strcmp(s.getClass(), 'StringUnit'), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		's.getClass() should return ''StringUnit''.')
	assert(strcmp(Element.getClass(s), 'StringUnit'), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(s) should return ''StringUnit''.')
	assert(strcmp(Element.getClass('StringUnit'), 'StringUnit'), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''StringUnit'') should return ''StringUnit''.')
	 
	% getSubclasses()
	assert(isequal(StringUnit.getSubclasses(), subclasses('StringUnit', [], [], true)), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.getSubclasses() should return the same result as subclasses(''StringUnit'', [], [], true).')
	assert(isequal(s.getSubclasses(), subclasses('StringUnit', [], [], true)), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''StringUnit'', [], [], true).')
	assert(isequal(Element.getSubclasses(s), subclasses('StringUnit', [], [], true)), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(s) should return the same result as subclasses(''StringUnit'', [], [], true).')
	assert(isequal(Element.getSubclasses('StringUnit'), subclasses('StringUnit', [], [], true)), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''StringUnit'') should return the same result as subclasses(''StringUnit'', [], [], true).')
	 
	% getProps()
	assert(isempty(StringUnit.getProps()) || isequal(StringUnit.getProps(), 1:1:length(StringUnit.getProps())), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.getProps() should return a row vector [1:1:N].')
	assert(isempty(StringUnit.getProps()) || isequal(s.getProps(), 1:1:length(StringUnit.getProps())), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		's.getProps() should return a row vector [1:1:N].')
	assert(isempty(StringUnit.getProps()) || isequal(Element.getProps(s), 1:1:length(StringUnit.getProps())), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(s) should return a row vector [1:1:N].')
	assert(isempty(StringUnit.getProps()) || isequal(Element.getProps('StringUnit'), 1:1:length(StringUnit.getProps())), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''StringUnit'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) StringUnit.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(StringUnit.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(StringUnit.getProps())), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.getProps(category) does not work.')
	tmp = cellfun(@(category) s.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(StringUnit.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(StringUnit.getProps())), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		's.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(s, category), categories, 'UniformOutput', false);
	assert(isempty(StringUnit.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(StringUnit.getProps())), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(s, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('StringUnit', category), categories, 'UniformOutput', false);
	assert(isempty(StringUnit.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(StringUnit.getProps())), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''StringUnit'', category) does not work.')
	 
	% getPropNumber()
	assert(StringUnit.getPropNumber() == length(StringUnit.getProps()), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.getPropNumber() should return the number of properties.')
	assert(s.getPropNumber() == length(StringUnit.getProps()), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		's.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(s) == length(StringUnit.getProps()), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(s) should return the number of properties.')
	assert(Element.getPropNumber('StringUnit') == length(StringUnit.getProps()), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''StringUnit'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) StringUnit.getPropNumber(category), categories)) == StringUnit.getPropNumber(), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) s.getPropNumber(category), categories)) == StringUnit.getPropNumber(), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		's.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(s, category), categories)) == StringUnit.getPropNumber(), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(s, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('StringUnit', category), categories)) == StringUnit.getPropNumber(), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''StringUnit'', category) does not work.')
	 
	% existsProp(prop)
	assert(~StringUnit.existsProp(NaN), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.existsProp(prop) does not work.')
	assert(~s.existsProp(NaN), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		's.existsProp(prop) does not work.')
	assert(~Element.existsProp(s, NaN), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(s, prop) does not work.')
	assert(~Element.existsProp('StringUnit', NaN), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''StringUnit'', prop) does not work.')
	 
	assert_with_error('StringUnit.existsProp(NaN)', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT], s)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT], s)
	assert_with_error('Element.existsProp(''StringUnit'', NaN)', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:StringUnit.getPropNumber()
		assert(StringUnit.existsProp(prop), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.existsProp(prop) does not work.')
		assert(s.existsProp(prop), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.existsProp(prop) does not work.')
		assert(Element.existsProp(s, prop), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(s, prop) does not work.')
		assert(Element.existsProp('StringUnit', prop), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''StringUnit'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~StringUnit.existsTag(''), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.existsTag(tag) does not work.')
	assert(~s.existsTag(''), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		's.existsTag(tag) does not work.')
	assert(~Element.existsTag(s, ''), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(s, tag) does not work.')
	assert(~Element.existsTag('StringUnit', ''), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''StringUnit'', tag) does not work.')
	 
	assert_with_error('StringUnit.existsTag('''')', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT], s)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT], s)
	assert_with_error('Element.existsTag(''StringUnit'', '''')', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:StringUnit.getPropNumber()
		tag = s.getPropTag(prop);
		assert(StringUnit.existsTag(tag), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.existsTag(tag) does not work.')
		assert(s.existsTag(tag), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.existsTag(tag) does not work.')
		assert(Element.existsTag(s, tag), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(s, tga) does not work.')
		assert(Element.existsTag('StringUnit', tag), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''StringUnit'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:StringUnit.getPropNumber()
		assert(StringUnit.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.getPropProp(prop) does not work.')
		assert(s.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.getPropProp(prop) does not work.')
		assert(Element.getPropProp(s, prop) == prop, ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(s, prop) does not work.')
		assert(Element.getPropProp('StringUnit', prop) == prop, ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''StringUnit'', prop) does not work.')
	 
		tag = s.getPropTag(prop);
		assert(StringUnit.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.getPropProp(tag) does not work.')
		assert(s.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.getPropProp(tag) does not work.')
		assert(Element.getPropProp(s, tag) == prop, ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(s, tag) does not work.')
		assert(Element.getPropProp('StringUnit', prop) == prop, ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''StringUnit'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:StringUnit.getPropNumber()
		tag = s.getPropTag(prop);
	 
		assert(strcmp(StringUnit.getPropTag(prop), tag), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.getPropTag(prop) does not work.')
		assert(strcmp(s.getPropTag(prop), tag), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(s, prop), tag), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(s, prop) does not work.')
		assert(strcmp(Element.getPropTag('StringUnit', prop), tag), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''StringUnit'', prop) does not work.')
	 
		assert(strcmp(StringUnit.getPropTag(tag), tag), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.getPropTag(tag) does not work.')
		assert(strcmp(s.getPropTag(tag), tag), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(s, tag), tag), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(s, tag) does not work.')
		assert(strcmp(Element.getPropTag('StringUnit', prop), tag), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''StringUnit'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:StringUnit.getPropNumber()
		tag = s.getPropTag(prop);
	 
		assert(Category.existsCategory(StringUnit.getPropCategory(prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(s.getPropCategory(prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(s, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(s, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(s, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''StringUnit'', prop) does not work.')
	 
		assert(Category.existsCategory(StringUnit.getPropCategory(tag)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(s.getPropCategory(tag)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(s, tag)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(s, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(s, tag)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''StringUnit'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:StringUnit.getPropNumber()
		tag = s.getPropTag(prop);
	 
		assert(Format.existsFormat(StringUnit.getPropFormat(prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(s.getPropFormat(prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(s, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(s, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(s, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''StringUnit'', prop) does not work.')
	 
		assert(Format.existsFormat(StringUnit.getPropFormat(tag)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(s.getPropFormat(tag)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(s, tag)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(s, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(s, tag)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''StringUnit'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:StringUnit.getPropNumber()
		tag = s.getPropTag(prop);
	 
		assert(ischar(StringUnit.getPropDescription(prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.getPropDescription(prop) does not work.')
		assert(ischar(s.getPropDescription(prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(s, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(s, prop) does not work.')
		assert(ischar(Element.getPropDescription(s, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''StringUnit'', prop) does not work.')
	 
		assert(ischar(StringUnit.getPropDescription(tag)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.getPropDescription(tag) does not work.')
		assert(ischar(s.getPropDescription(tag)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(s, tag)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(s, tag) does not work.')
		assert(ischar(Element.getPropDescription(s, tag)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''StringUnit'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:StringUnit.getPropNumber()
		tag = s.getPropTag(prop);
	 
		settings = StringUnit.getPropSettings(prop);
		settings = s.getPropSettings(prop);
		settings = Element.getPropSettings(s, prop);
		settings = Element.getPropSettings('StringUnit', prop);
	 
		settings = StringUnit.getPropSettings(tag);
		settings = s.getPropSettings(tag);
		settings = Element.getPropSettings(s, tag);
		settings = Element.getPropSettings('StringUnit', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:StringUnit.getPropNumber()
		tag = s.getPropTag(prop);
	 
		default = StringUnit.getPropDefault(prop);
		default = s.getPropDefault(prop);
		default = Element.getPropDefault(s, prop);
		default = Element.getPropDefault('StringUnit', prop);
	 
		default = StringUnit.getPropDefault(tag);
		default = s.getPropDefault(tag);
		default = Element.getPropDefault(s, tag);
		default = Element.getPropDefault('StringUnit', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:StringUnit.getPropNumber()
		tag = s.getPropTag(prop);
	 
		conditioned_default = StringUnit.getPropDefaultConditioned(prop);
		conditioned_default = s.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(s, prop);
		conditioned_default = Element.getPropDefaultConditioned('StringUnit', prop);
	 
		conditioned_default = StringUnit.getPropDefaultConditioned(tag);
		conditioned_default = s.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(s, tag);
		conditioned_default = Element.getPropDefaultConditioned('StringUnit', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:StringUnit.getPropNumber()
		tag = s.getPropTag(prop);
	 
		assert(~StringUnit.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.checkProp(prop, value) does not work.')
		assert(~s.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(s, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(s, prop, value) does not work.')
		assert(~Element.checkProp('StringUnit', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''StringUnit'', prop, value) does not work.')
	 
		assert_with_error('StringUnit.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT], prop, s)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT], prop, s)
		assert_with_error('Element.checkProp(''StringUnit'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~StringUnit.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.checkProp(tag, value) does not work.')
		assert(~s.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(s, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(s, tag, value) does not work.')
		assert(~Element.checkProp('StringUnit', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''StringUnit'', tag, value) does not work.')
	 
		assert_with_error('StringUnit.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT], tag, s)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT], tag, s)
		assert_with_error('Element.checkProp(''StringUnit'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':StringUnit:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(StringUnit.checkProp(prop, Element.getPropDefaultConditioned(StringUnit, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.checkProp(prop, <conditioned default value>) does not work.')
		assert(s.checkProp(prop, Element.getPropDefaultConditioned(StringUnit, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(s, prop, Element.getPropDefaultConditioned(StringUnit, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(s, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('StringUnit', prop, Element.getPropDefaultConditioned(StringUnit, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''StringUnit'', prop, <conditioned default value>) does not work.')
	 
		assert(StringUnit.checkProp(tag, Element.getPropDefaultConditioned(StringUnit, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.checkProp(tag, <conditioned default value>) does not work.')
		assert(s.checkProp(tag, Element.getPropDefaultConditioned(StringUnit, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			's.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(s, tag, Element.getPropDefaultConditioned(StringUnit, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(s, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('StringUnit', tag, Element.getPropDefaultConditioned(StringUnit, prop)), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''StringUnit'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	s = StringUnit( ...
		StringUnit.ELCLASS, StringUnit.getNoValue(), ...
		StringUnit.NAME, StringUnit.getNoValue(), ...
		StringUnit.DESCRIPTION, StringUnit.getNoValue(), ...
		StringUnit.TEMPLATE, StringUnit.getPropDefault(StringUnit.TEMPLATE), ...
		StringUnit.ID, StringUnit.getPropDefault(StringUnit.ID), ...
		StringUnit.LABEL, StringUnit.getPropDefault(StringUnit.LABEL), ...
		StringUnit.NOTES, StringUnit.getPropDefault(StringUnit.NOTES), ...
		StringUnit.TOSTRING, StringUnit.getNoValue(), ...
		StringUnit.S, StringUnit.getPropDefault(StringUnit.S) ...
		);
	 
	for prop = 1:1:StringUnit.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(StringUnit.getPropTag(prop));
		switch StringUnit.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					s.getr(prop) == StringUnit.getNoValue(), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['Being a ' StringUnit.getCategoryName(StringUnit.getPropCategory(prop)) ', StringUnit.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in StringUnit.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					s.getr(TAG) == StringUnit.getNoValue(), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['Being a ' StringUnit.getCategoryName(StringUnit.getPropCategory(prop)) ', StringUnit.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in StringUnit.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(s.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(s.getPropSettings(prop))
					assert( ...
						s.checkFormat(s.getPropFormat(prop), s.get(prop)), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						['StringUnit.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						s.checkFormat(s.getPropFormat(prop), s.get(prop), s.getPropSettings(prop)), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						['StringUnit.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					s.getr(prop) == StringUnit.getNoValue(), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['Being a ' StringUnit.getCategoryName(StringUnit.getPropCategory(prop)) ', StringUnit.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in StringUnit.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					s.getr(TAG) == StringUnit.getNoValue(), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['Being a ' StringUnit.getCategoryName(StringUnit.getPropCategory(prop)) ', StringUnit.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in StringUnit.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':StringUnit']);
				assert( ...
					~isa(s.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(s.getPropSettings(prop))
					assert( ...
						s.checkFormat(s.getPropFormat(prop), s.get(prop)), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						['StringUnit.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						s.checkFormat(s.getPropFormat(prop), s.get(prop), s.getPropSettings(prop)), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						['StringUnit.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(s.getr(prop), StringUnit.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by StringUnit.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in StringUnit.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(s.getr(TAG), StringUnit.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' TAG ') must be inizialized to its default value ' ...
					'given by StringUnit.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in StringUnit.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	s = StringUnit( ...
		StringUnit.ELCLASS, StringUnit.getNoValue(), ...
		StringUnit.NAME, StringUnit.getNoValue(), ...
		StringUnit.DESCRIPTION, StringUnit.getNoValue(), ...
		StringUnit.TEMPLATE, StringUnit.getPropDefault(StringUnit.TEMPLATE), ...
		StringUnit.ID, StringUnit.getPropDefault(StringUnit.ID), ...
		StringUnit.LABEL, StringUnit.getPropDefault(StringUnit.LABEL), ...
		StringUnit.NOTES, StringUnit.getPropDefault(StringUnit.NOTES), ...
		StringUnit.TOSTRING, StringUnit.getNoValue(), ...
		StringUnit.S, StringUnit.getPropDefault(StringUnit.S) ...
		);
	 
	for prop = 1:1:StringUnit.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(StringUnit.getPropTag(prop));
		switch StringUnit.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(s.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(s.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(s.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(s.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					s.checkFormat(s.getPropFormat(prop), s.getr(prop),s.getPropSettings(prop)), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':StringUnit']);
				assert( ...
					~isa(s.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(s.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':StringUnit']);
	% 			assert( ...
	% 				~isa(s.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
	% 				['StringUnit.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(s.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
	% 				['StringUnit.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				s.checkFormat(s.getPropFormat(prop), s.getr(prop),s.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
	% 				['StringUnit.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':StringUnit']);
				assert( ...
					~isa(s.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(s.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(s.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(s.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					s.checkFormat(s.getPropFormat(prop), s.getr(prop),s.getPropSettings(prop)), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if s.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:StringUnit');
					delete(ancestor(s.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(StringUnit.getProps(Category.RESULT))
		for prop = 1:1:StringUnit.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch StringUnit.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						s.isLocked(prop), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						['StringUnit.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~s.isLocked(prop), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						['StringUnit.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	s = StringUnit();
	 
	for prop = 1:1:StringUnit.getPropNumber()
		TAG = upper(StringUnit.getPropTag(prop));
		assert( ...
			~s.isLocked(prop), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			['StringUnit.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~s.isLocked(TAG), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			['StringUnit.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	s.lock()
	 
	for prop = 1:1:StringUnit.getPropNumber()
		switch StringUnit.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					s.isLocked(prop), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~s.isLocked(prop), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	s = StringUnit();
	 
	warning_backup = warning('off', 'BRAPH2:StringUnit');
	for prop = 1:1:StringUnit.getPropNumber()
		s.lock(prop)
		switch StringUnit.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					s.isLocked(prop), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~s.isLocked(prop), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	s = StringUnit();
	 
	for prop = 1:1:StringUnit.getPropNumber()
		TAG = upper(StringUnit.getPropTag(prop));
		assert( ...
			s.isChecked(prop), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			['StringUnit.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			s.isChecked(TAG), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			['StringUnit.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	s.unchecked()
	 
	for prop = 1:1:StringUnit.getPropNumber()
		assert( ...
			~s.isChecked(prop), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			['StringUnit.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	s.checked()
	 
	for prop = 1:1:StringUnit.getPropNumber()
		assert( ...
			s.isChecked(prop), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			['StringUnit.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic StringUnit
	s_0 = StringUnit( ...
		StringUnit.ELCLASS, StringUnit.getNoValue(), ...
		StringUnit.NAME, StringUnit.getNoValue(), ...
		StringUnit.DESCRIPTION, StringUnit.getNoValue(), ...
		StringUnit.TEMPLATE, StringUnit.getPropDefault(StringUnit.TEMPLATE), ...
		StringUnit.ID, StringUnit.getPropDefault(StringUnit.ID), ...
		StringUnit.LABEL, StringUnit.getPropDefault(StringUnit.LABEL), ...
		StringUnit.NOTES, StringUnit.getPropDefault(StringUnit.NOTES), ...
		StringUnit.TOSTRING, StringUnit.getNoValue(), ...
		StringUnit.S, StringUnit.getPropDefault(StringUnit.S) ...
		);
	 
	% StringUnit with 1st callbacks
	s_1 = StringUnit( ...
		StringUnit.ELCLASS, StringUnit.getNoValue(), ...
		StringUnit.NAME, StringUnit.getNoValue(), ...
		StringUnit.DESCRIPTION, StringUnit.getNoValue(), ...
		StringUnit.TEMPLATE, s_0.getCallback(4), ..., ...
		StringUnit.ID, s_0.getCallback(5), ..., ...
		StringUnit.LABEL, StringUnit.getPropDefault(StringUnit.LABEL), ...
		StringUnit.NOTES, StringUnit.getPropDefault(StringUnit.NOTES), ...
		StringUnit.TOSTRING, StringUnit.getNoValue(), ...
		StringUnit.S, s_0.getCallback(9) ... ...
		);
	 
	prop_number = StringUnit.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(StringUnit.getPropTag(prop));
		switch StringUnit.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(s_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(s_1.get(prop), s_0.get(prop)) && ~isa(s_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(s_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% StringUnit with 2nd callbacks
	s_2 = StringUnit( ...
		StringUnit.ELCLASS, StringUnit.getNoValue(), ...
		StringUnit.NAME, StringUnit.getNoValue(), ...
		StringUnit.DESCRIPTION, StringUnit.getNoValue(), ...
		StringUnit.TEMPLATE, s_1.getCallback(4), ..., ...
		StringUnit.ID, s_1.getCallback(5), ..., ...
		StringUnit.LABEL, StringUnit.getPropDefault(StringUnit.LABEL), ...
		StringUnit.NOTES, StringUnit.getPropDefault(StringUnit.NOTES), ...
		StringUnit.TOSTRING, StringUnit.getNoValue(), ...
		StringUnit.S, s_1.getCallback(9) ... ...
		);
	 
	prop_number = StringUnit.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(StringUnit.getPropTag(prop));
		switch StringUnit.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(s_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(s_2.get(prop), s_0.get(prop)) && ~isa(s_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(s_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% StringUnit with 3rd callbacks
	s_3 = StringUnit( ...
		StringUnit.ELCLASS, StringUnit.getNoValue(), ...
		StringUnit.NAME, StringUnit.getNoValue(), ...
		StringUnit.DESCRIPTION, StringUnit.getNoValue(), ...
		StringUnit.TEMPLATE, s_2.getCallback(4), ..., ...
		StringUnit.ID, s_2.getCallback(5), ..., ...
		StringUnit.LABEL, StringUnit.getPropDefault(StringUnit.LABEL), ...
		StringUnit.NOTES, StringUnit.getPropDefault(StringUnit.NOTES), ...
		StringUnit.TOSTRING, StringUnit.getNoValue(), ...
		StringUnit.S, s_2.getCallback(9) ... ...
		);
	 
	prop_number = StringUnit.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(StringUnit.getPropTag(prop));
		switch StringUnit.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(s_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(s_3.get(prop), s_0.get(prop)) && ~isa(s_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(s_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	s = StringUnit();
	 
	s_copy = s.copy();
	 
	assert(s_copy ~= s, ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(s_copy, s), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:StringUnit.getPropNumber()
		value = s.getr(prop);
		value_copy = s_copy.getr(prop);
		switch StringUnit.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					'StringUnit.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
							'StringUnit.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
							'StringUnit.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					s_copy.isLocked(prop) == s.isLocked(prop), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					'StringUnit.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					s_copy.isChecked(prop) == s.isChecked(prop), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					'StringUnit.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					s_copy.getPropSeed(prop) == s.getPropSeed(prop), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					'StringUnit.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	s = StringUnit( ...
		StringUnit.ELCLASS, StringUnit.getNoValue(), ...
		StringUnit.NAME, StringUnit.getNoValue(), ...
		StringUnit.DESCRIPTION, StringUnit.getNoValue(), ...
		StringUnit.TEMPLATE, StringUnit.getPropDefault(StringUnit.TEMPLATE), ...
		StringUnit.ID, StringUnit.getPropDefault(StringUnit.ID), ...
		StringUnit.LABEL, StringUnit.getPropDefault(StringUnit.LABEL), ...
		StringUnit.NOTES, StringUnit.getPropDefault(StringUnit.NOTES), ...
		StringUnit.TOSTRING, StringUnit.getNoValue(), ...
		StringUnit.S, StringUnit.getPropDefault(StringUnit.S) ...
		);
	 
	for prop = 1:1:StringUnit.getPropNumber()
		if StringUnit.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':StringUnit']);
			% s.memorize(prop);
			% warning(warning_backup)
		elseif StringUnit.getPropCategory(prop) == Category.EVANESCENT && s.getPropFormat(prop) == Format.HANDLE
			s.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:StringUnit');
			delete(ancestor(s.get(prop), 'figure'))
			warning(warning_backup)
		else
			s.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	s_copy = s.copy();
	 
	for prop = 1:1:StringUnit.getPropNumber()
		value = s.getr(prop);
		value_copy = s_copy.getr(prop);
		switch StringUnit.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					'StringUnit.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
							'StringUnit.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
							'StringUnit.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						s_copy.isLocked(prop) == s.isLocked(prop), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						s_copy.isChecked(prop) == s.isChecked(prop), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						s_copy.getPropSeed(prop) == s.getPropSeed(prop), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	s_0 = StringUnit( ...
		StringUnit.ELCLASS, StringUnit.getNoValue(), ...
		StringUnit.NAME, StringUnit.getNoValue(), ...
		StringUnit.DESCRIPTION, StringUnit.getNoValue(), ...
		StringUnit.TEMPLATE, StringUnit.getPropDefault(StringUnit.TEMPLATE), ...
		StringUnit.ID, StringUnit.getPropDefault(StringUnit.ID), ...
		StringUnit.LABEL, StringUnit.getPropDefault(StringUnit.LABEL), ...
		StringUnit.NOTES, StringUnit.getPropDefault(StringUnit.NOTES), ...
		StringUnit.TOSTRING, StringUnit.getNoValue(), ...
		StringUnit.S, StringUnit.getPropDefault(StringUnit.S) ...
		);
	 
	s = StringUnit( ...
		StringUnit.ELCLASS, StringUnit.getNoValue(), ...
		StringUnit.NAME, StringUnit.getNoValue(), ...
		StringUnit.DESCRIPTION, StringUnit.getNoValue(), ...
		StringUnit.TEMPLATE, s_0.getCallback(4), ..., ...
		StringUnit.ID, s_0.getCallback(5), ..., ...
		StringUnit.LABEL, StringUnit.getPropDefault(StringUnit.LABEL), ...
		StringUnit.NOTES, StringUnit.getPropDefault(StringUnit.NOTES), ...
		StringUnit.TOSTRING, StringUnit.getNoValue(), ...
		StringUnit.S, s_0.getCallback(9) ... ...
		);
	 
	s_copy = s.copy();
	s_0_copy = s_copy.getr('ID').get('EL');
	 
	for prop = 1:1:StringUnit.getPropNumber()
		value = s.getr(prop);
		value_copy = s_copy.getr(prop);
		switch StringUnit.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					'StringUnit.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
							'StringUnit.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
							'StringUnit.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == s_0.getCallback(prop), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The callback should be obtained from StringUnit.getCallback().' ...
						)
					assert( ...
						value_copy == s_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The callback should be obtained from StringUnit.getCallback().' ...
						)
				end
	 
					assert( ...
						s_copy.isLocked(prop) == s.isLocked(prop), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						s_copy.isChecked(prop) == s.isChecked(prop), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						s_copy.getPropSeed(prop) == s.getPropSeed(prop), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	s_template = StringUnit();
	s = StringUnit('TEMPLATE', s_template);
	 
	for prop = 1:1:StringUnit.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(StringUnit.getPropTag(prop));
		switch StringUnit.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == StringUnit.TEMPLATE
					assert( ...
						isa(s.getr(prop), 'StringUnit'), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit TEMPLATE does not work. StringUnit.getr(''TEMPLATE'') should be a StringUnit element.' ...
						)
					assert( ...
						isa(s_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						'StringUnit TEMPLATE does not work. StringUnit_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(s.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						['StringUnit TEMPLATE does not work. StringUnit.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						s.getr(prop).get('EL') == s_template && s.getr(prop).get('PROP') == prop && strcmp(s.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						['StringUnit TEMPLATE does not work. StringUnit.getr(' TAG ') should be a Callback to s_template.' TAG '.'] ...
						)
					assert( ...
						isa(s_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
						['StringUnit TEMPLATE does not work. StringUnit_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(s.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit TEMPLATE does not work. StringUnit.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(s_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
					['StringUnit TEMPLATE does not work. StringUnit_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	s = StringUnit( ...
		StringUnit.ELCLASS, StringUnit.getNoValue(), ...
		StringUnit.NAME, StringUnit.getNoValue(), ...
		StringUnit.DESCRIPTION, StringUnit.getNoValue(), ...
		StringUnit.TEMPLATE, StringUnit.getPropDefault(StringUnit.TEMPLATE), ...
		StringUnit.ID, StringUnit.getPropDefault(StringUnit.ID), ...
		StringUnit.LABEL, StringUnit.getPropDefault(StringUnit.LABEL), ...
		StringUnit.NOTES, StringUnit.getPropDefault(StringUnit.NOTES), ...
		StringUnit.TOSTRING, StringUnit.getNoValue(), ...
		StringUnit.S, StringUnit.getPropDefault(StringUnit.S) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'stringunit_to_be_erased.b2'];
	 
	Element.save(s, filename)
	 
	s_loaded = Element.load(filename);
	 
	assert( ...
		isequal(s.copy(), s_loaded), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.save(s) and/or StringUnit.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	s = StringUnit( ...
		StringUnit.ELCLASS, StringUnit.getNoValue(), ...
		StringUnit.NAME, StringUnit.getNoValue(), ...
		StringUnit.DESCRIPTION, StringUnit.getNoValue(), ...
		StringUnit.TEMPLATE, StringUnit.getPropDefault(StringUnit.TEMPLATE), ...
		StringUnit.ID, StringUnit.getPropDefault(StringUnit.ID), ...
		StringUnit.LABEL, StringUnit.getPropDefault(StringUnit.LABEL), ...
		StringUnit.NOTES, StringUnit.getPropDefault(StringUnit.NOTES), ...
		StringUnit.TOSTRING, StringUnit.getNoValue(), ...
		StringUnit.S, StringUnit.getPropDefault(StringUnit.S) ...
		);
	 
	[json, struct, el_list] = encodeJSON(s);
	[s_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(s_dec ~= s, ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		'StringUnit.encodeJSON() or StringUnit.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) StringUnit.getPropFormat(prop), num2cell(StringUnit.getProps())) == Format.HANDLE) && all(cellfun(@(prop) StringUnit.getPropFormat(prop), num2cell(StringUnit.getProps())) == Format.NET)
		assert(isequal(s_dec, s), ...
			[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
			'StringUnit.encodeJSON() or StringUnit.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: test
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	defined_string = 'test';
	su = StringUnit('S', defined_string);
	
	assert(isequal(su.get('S'), defined_string), ...
	    [BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
	    'StringUnit does not store the defined string properly.' ...
	    )
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':StringUnit:' BRAPH2.FAIL_TEST], ...
		[' When testing StringUnit no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

